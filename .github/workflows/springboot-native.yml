name: SpringBoot Native CI/CD

on:
  push:
    branches:
      - master
#    paths:
#      - 'springboot/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Set up JDK 21 with GraalVM
        uses: DeLaGuardo/setup-graalvm@4.1
        with:
          graalvm-version: '21.0.2'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x springboot/gradlew

      - name: Build with Gradle
        run: |
          cd springboot
          ./gradlew clean build -x test

      # Here, you would add a step to create a native image if needed.
      # This assumes that your Gradle build is set up to compile a native image.
      - name: Build Native Image with Gradle
        run: |
          cd springboot
          ./gradlew nativeCompile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./springboot
          file: ./springboot/Dockerfile-native
          push: true
          tags: codepocuser/knative-springboot-native:latest

      - name: Deploy to OpenShift
        run: |
          echo ${{ secrets.OPENSHIFT_TOKEN }} | oc login ${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }} --insecure-skip-tls-verify
          oc apply -f springboot/deploy.yaml